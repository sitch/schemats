import { size } from 'lodash'

import { BuildContext } from '../compiler'
import { Backend } from '../config'
import { TypeDBCoreferences } from '../coreference'
import { commentLines, padLines, pretty } from '../formatters'

export type CommentDelimiter = string
export type IndentDelimiter = string

export interface BackendContext {
  backend: Backend
  comment: CommentDelimiter
  indent: IndentDelimiter
  coreferences: TypeDBCoreferences
}

export const header = (
  { config }: BuildContext,
  { comment }: BackendContext,
): string => {
  if (!config.writeHeader) {
    return ''
  }

  return commentLines(
    comment,
    `###############################################################################

  AUTO-GENERATED FILE @ ${config.timestamp} - DO NOT EDIT!

  This file was automatically generated by schemats v.${config.version}
  $ ${config.commandFromCLI}

###############################################################################`,
  )
}

export const coreferenceBanner = (
  _context: BuildContext,
  { comment, indent, coreferences: { all, error, warning } }: BackendContext,
) => {
  if (size(all) === 0) {
    return ''
  }
  return commentLines(
    comment,
    `###############################################################################
  ⛔ CRITICAL ⛔ - (${size(error)}) - Attribute Conflicts
###############################################################################
${padLines(pretty(error), indent)}
===============================================================================
  ⚠️ WARNING ⚠️ - (${size(warning)}) - UDT Conflicts
===============================================================================
${padLines(pretty(warning), indent)}
-------------------------------------------------------------------------------
  ❎ INFO ❎ - (${size(all)}) - Attribute Overlaps
-------------------------------------------------------------------------------
${padLines(pretty(all), indent)}
###############################################################################`,
  )
}
