import { UserImport } from "../config";
import { flatMap } from "lodash";
import { BuildContext } from "../generator";
import { translateType, isReservedWord } from "../typemaps/typescript-typemap";
import {
  ColumnDefinition,
  EnumDefinition,
  TableDefinition,
} from "../adapters/types";

//------------------------------------------------------------------------------

const normalizeName = (name: string): string =>
  isReservedWord(name) ? `${name}_` : name;

//------------------------------------------------------------------------------

const castHeader = ({ config }: BuildContext): string => `
/**
 * AUTO-GENERATED FILE @ ${config.timestamp} - DO NOT EDIT!
 *
 * This file was automatically generated by schemats v.${config.version}
 * $ ${config.commandFromCLI}
 *
 */`;

//------------------------------------------------------------------------------

const Enums = {
  name: ({ config }: BuildContext, { name }: EnumDefinition): string => {
    return normalizeName(config.formatEnumName(`${name}`));
  },
  key: (_context: BuildContext, value: string): string => {
    return value;
  },
  value: (_context: BuildContext, value: string): string => {
    return value;
  },
};

const castEnumAsEnum = (context: BuildContext) => (record: EnumDefinition) => {
  const entries = Array.from(record.values).map(
    (value: string) =>
      `  '${Enums.key(context, value)}' = '${Enums.value(context, value)}'`
  );
  return `export enum ${Enums.name(context, record)} {\n${entries.join(
    ",\n"
  )}\n}`;
};

const castEnumAsType = (context: BuildContext) => (record: EnumDefinition) => {
  const entries = Array.from(record.values).map(
    (value: string) => `'${value}'`
  );
  return `export type ${Enums.name(context, record)} = ${entries.join(" | ")}`;
};

const castEnum =
  (context: BuildContext) =>
  (record: EnumDefinition): string => {
    if (context.config.enums) {
      return castEnumAsEnum(context)(record);
    }
    return castEnumAsType(context)(record);
  };

//------------------------------------------------------------------------------

const Interface = {
  name: ({ config }: BuildContext, { name }: TableDefinition): string => {
    return normalizeName(config.formatTableName(name));
  },
  key: (
    { config }: BuildContext,
    { name, isNullable }: ColumnDefinition
  ): string => {
    return `${normalizeName(config.formatColumnName(name))}${
      isNullable ? "?" : ""
    }`;
  },
  value: (context: BuildContext, record: ColumnDefinition): string => {
    return translateType(context, record);
  },
};

const castInterface = (context: BuildContext) => (record: TableDefinition) => {
  const name = Interface.name(context, record);
  const fields = Object.values(record.columns).map((column) => {
    const key = Interface.key(context, column);
    const value = Interface.value(context, column);
    return `  ${key}: ${value}`;
  });
  return `export interface ${name} {\n${fields.join("\n")}\n}`;
};

//------------------------------------------------------------------------------

const castUserImports =
  ({ config, tables }: BuildContext) =>
  (record: UserImport): string => {
    return `import { ${Array.from(record).join(", ")} } from '${
      config.typesFile
    }'\n\n`;
  };

//------------------------------------------------------------------------------

export const castLookup = ({ config, tables }: BuildContext): string => {
  const types = Object.values(tables).map(
    ({ name }) => `  ${name}: ${normalizeName(config.formatTableName(name))}`
  );
  return `export interface Tables {\n${types.join(",\n")}\n}`;
};

//------------------------------------------------------------------------------

export const typescriptOfSchema = async (context: BuildContext) => {
  const enums = flatMap(context.enums, castEnum(context));
  const customImports = flatMap(context.userImports, castUserImports(context));
  const interfaces = flatMap(
    Object.values(context.tables),
    castInterface(context)
  );
  const lookup = castLookup(context);

  return [
    context.config.writeHeader ? [castHeader(context)] : [],
    customImports,
    enums,
    interfaces,
    lookup,
  ]
    .flat()
    .join("\n\n");
};
