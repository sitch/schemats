/* eslint-disable @typescript-eslint/no-non-null-assertion */
import chalk from 'chalk'
import type { Command } from 'commander'
import fs from 'fs-extra'
import { groupBy, keys } from 'lodash'

import type { CommandOptions } from '../src/config'
import { read_json } from '../src/utils'

//------------------------------------------------------------------------------

type NodeMap = Map<number, string>

interface Neo4jSpecification {
  nodes: Neo4jNode[]
  relationships: Neo4jRelationship[]
}

interface Neo4jNode {
  identity: number
  properties: Neo4jNodeProperties

  // Unused
  labels: string[]
}

interface Neo4jNodeProperties {
  name: string
  indexes: string[]
  constraints: string[]
}

interface Neo4jRelationship {
  identity: number
  start: number
  end: number
  type: string
  properties: Neo4jRelationshipProperties
}

type Neo4jRelationshipProperties = Record<string, never>

//##############################################################################

function cast_node_struct({ properties: { name, indexes, constraints } }: Neo4jNode) {
  const comments =
    constraints.length > 0 ? `# constraints: ${constraints.join(',')}\n` : ''
  const fields = indexes.map(index => `    ${index}::Union{Missing,Any}`).sort()

  return `
${comments}@kwdef mutable struct ${name}
${fields.join('\n')}
end
`
}

function cast_relationship_struct(node_map: NodeMap) {
  return (name: string, relationships: Neo4jRelationship[]) => {
    const edges = relationships
      .map(({ start, end }) => `Tuple{${node_map.get(start)!},${node_map.get(end)!}}`)
      .sort()

    return `
@kwdef mutable struct ${name}
    edge::Union{${edges.join(',')}}
end
`
  }
}

//------------------------------------------------------------------------------

function cast_node_name({ properties: { name } }: Neo4jNode) {
  return `${name}`
}

function cast_relationship_name({ type }: Neo4jRelationship) {
  return `${type}`
}

// function cast_relationship_name(node_map: NodeMap) {
//   return ({ start, end, type }: Neo4jRelationship) => {
//     const source = node_map.get(start)!
//     const destination = node_map.get(end)!

//     return `${source}__${type}__${destination}`
//   }
// }

//##############################################################################

const template = ({ nodes, relationships }: Neo4jSpecification) => {
  const node_map = new Map<number, string>()
  for (const node of nodes) node_map.set(node.identity, node.properties.name)

  const node_names = nodes.map(node => cast_node_name(node)).sort()
  const node_structs = nodes.map(node => cast_node_struct(node)).sort()

  const relationship_groups = groupBy(relationships, cast_relationship_name)
  const relationship_names = keys(relationship_groups)

  const relationship_structs = relationship_names.map(name =>
    cast_relationship_struct(node_map)(name, relationship_groups[name]),
  )

  return [
    `
################################################################################
#
#  AUTO-GENERATED FILE @ __TIMESTAMP_BYPASS__ - DO NOT EDIT!
#
#  This file was automatically generated by schemats v.2.0.0
#
################################################################################
`,
    '\nmodule ckg\n',

    // Names
    '\n#-------------------------------------------------------------------------------\n',
    ...node_names.map(name => `# ${name}`).join('\n'),
    '\n#-------------------------------------------------------------------------------\n',
    ...relationship_names.map(name => `# ${name}`).join('\n'),
    '\n#-------------------------------------------------------------------------------\n',

    // Exports
    ...node_names.map(name => `export ${name}`).join('\n'),
    ...relationship_names.map(name => `export ${name}`).join('\n'),

    `

#-------------------------------------------------------------------------------
# Nodes (${nodes.length})
# Relationships (${relationships.length})
#-------------------------------------------------------------------------------

using Dates
import Base: @kwdef
`,

    `
#-------------------------------------------------------------------------------
# Nodes (${nodes.length})
#-------------------------------------------------------------------------------
`,
    ...node_structs,
    `
  #-------------------------------------------------------------------------------
  # Relationships (${relationships.length})
  #-------------------------------------------------------------------------------
  `,
    ...relationship_structs,

    // Octo Definitions
    // TODO: implement

    // end module
    'end',
  ].join('')
}

//##############################################################################

export const neo4j = (program: Command, _argv: string[]) => {
  program
    .command('neo4j')
    .description('Generate from neo4j json')
    .argument('<neo4j_config>', 'Neo4j json file')
    .argument('<output>', 'Destination file')
    .option('--json', "don't generate a header")
    .action((neo4j_config: string, output: string, _options: CommandOptions) => {
      const specifications = read_json<Neo4jSpecification[]>(neo4j_config)

      if (specifications.length !== 1) {
        // console.error(specifications)
        throw new Error('Expected neo4j specification file to be an array of 1')
      }
      const content = template(specifications[0])
      fs.writeFileSync(output, content)
    })

  program.action(() => console.error(chalk.red(program.helpInformation())))
}
